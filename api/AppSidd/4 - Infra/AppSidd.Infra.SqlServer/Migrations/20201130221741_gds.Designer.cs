// <auto-generated />
using System;
using AppSidd.Infra.SqlServer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AppSidd.Infra.SqlServer.Migrations
{
    [DbContext(typeof(AppSiddServerContext))]
    [Migration("20201130221741_gds")]
    partial class gds
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AppSidd.Domain.Project.Acolhimento", b =>
                {
                    b.Property<Guid>("AcolhimentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrequenciaCardiaca")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Glicemia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Medicamentos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observacoes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PressaoArterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Saturação")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sintomas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AcolhimentoId");

                    b.ToTable("Acolhimento");
                });

            modelBuilder.Entity("AppSidd.Domain.Project.CDR", b =>
                {
                    b.Property<Guid>("CDRId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Question1")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Question2")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Question3")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Question4")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Question5")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Question6")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CDRId");

                    b.ToTable("CDR");
                });

            modelBuilder.Entity("AppSidd.Domain.Project.GDS", b =>
                {
                    b.Property<Guid>("GDSId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Question1")
                        .HasColumnType("int");

                    b.Property<int>("Question10")
                        .HasColumnType("int");

                    b.Property<int>("Question11")
                        .HasColumnType("int");

                    b.Property<int>("Question12")
                        .HasColumnType("int");

                    b.Property<int>("Question13")
                        .HasColumnType("int");

                    b.Property<int>("Question14")
                        .HasColumnType("int");

                    b.Property<int>("Question15")
                        .HasColumnType("int");

                    b.Property<int>("Question2")
                        .HasColumnType("int");

                    b.Property<int>("Question3")
                        .HasColumnType("int");

                    b.Property<int>("Question4")
                        .HasColumnType("int");

                    b.Property<int>("Question5")
                        .HasColumnType("int");

                    b.Property<int>("Question6")
                        .HasColumnType("int");

                    b.Property<int>("Question7")
                        .HasColumnType("int");

                    b.Property<int>("Question8")
                        .HasColumnType("int");

                    b.Property<int>("Question9")
                        .HasColumnType("int");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GDSId");

                    b.ToTable("GDS");
                });

            modelBuilder.Entity("AppSidd.Domain.Project.MEEM", b =>
                {
                    b.Property<Guid>("MEEMId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Escolaridade")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Question1")
                        .HasColumnType("int");

                    b.Property<int>("Question10")
                        .HasColumnType("int");

                    b.Property<int>("Question11")
                        .HasColumnType("int");

                    b.Property<int>("Question2")
                        .HasColumnType("int");

                    b.Property<int>("Question3")
                        .HasColumnType("int");

                    b.Property<int>("Question4")
                        .HasColumnType("int");

                    b.Property<int>("Question5")
                        .HasColumnType("int");

                    b.Property<int>("Question6")
                        .HasColumnType("int");

                    b.Property<int>("Question7")
                        .HasColumnType("int");

                    b.Property<int>("Question8")
                        .HasColumnType("int");

                    b.Property<int>("Question9")
                        .HasColumnType("int");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MEEMId");

                    b.ToTable("MEEM");
                });

            modelBuilder.Entity("AppSidd.Domain.Project.MoCA", b =>
                {
                    b.Property<Guid>("MoCAId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Question1")
                        .HasColumnType("int");

                    b.Property<int>("Question10")
                        .HasColumnType("int");

                    b.Property<int>("Question2")
                        .HasColumnType("int");

                    b.Property<int>("Question3")
                        .HasColumnType("int");

                    b.Property<int>("Question4")
                        .HasColumnType("int");

                    b.Property<int>("Question5")
                        .HasColumnType("int");

                    b.Property<int>("Question6")
                        .HasColumnType("int");

                    b.Property<int>("Question7")
                        .HasColumnType("int");

                    b.Property<int>("Question8")
                        .HasColumnType("int");

                    b.Property<int>("Question9")
                        .HasColumnType("int");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MoCAId");

                    b.ToTable("MoCA");
                });

            modelBuilder.Entity("AppSidd.Domain.Project.Pfeffer", b =>
                {
                    b.Property<Guid>("PfefferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Question1")
                        .HasColumnType("int");

                    b.Property<int>("Question10")
                        .HasColumnType("int");

                    b.Property<int>("Question2")
                        .HasColumnType("int");

                    b.Property<int>("Question3")
                        .HasColumnType("int");

                    b.Property<int>("Question4")
                        .HasColumnType("int");

                    b.Property<int>("Question5")
                        .HasColumnType("int");

                    b.Property<int>("Question6")
                        .HasColumnType("int");

                    b.Property<int>("Question7")
                        .HasColumnType("int");

                    b.Property<int>("Question8")
                        .HasColumnType("int");

                    b.Property<int>("Question9")
                        .HasColumnType("int");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PfefferId");

                    b.ToTable("Pfeffer");
                });

            modelBuilder.Entity("AppSidd.Domain.Project.Sintomas", b =>
                {
                    b.Property<Guid>("SintomasId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Doenca1")
                        .HasColumnType("int");

                    b.Property<int?>("Doenca2")
                        .HasColumnType("int");

                    b.Property<int?>("Doenca3")
                        .HasColumnType("int");

                    b.Property<int?>("Doenca4")
                        .HasColumnType("int");

                    b.Property<int?>("Doenca5")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SintomasId");

                    b.ToTable("Sintomas");
                });

            modelBuilder.Entity("AppSidd.Domain.Project.TesteSintoma", b =>
                {
                    b.Property<Guid>("TesteSintomaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("SintomasId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TesteSintomaId");

                    b.HasIndex("SintomasId");

                    b.ToTable("TesteSintoma");
                });

            modelBuilder.Entity("AppSidd.Domain.Project.Unity", b =>
                {
                    b.Property<Guid>("UnityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UnityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UnityId");

                    b.ToTable("Unity");
                });

            modelBuilder.Entity("AppSidd.Domain.Users.Auth.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("EstadoCivil")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Idade")
                        .HasColumnType("int");

                    b.Property<DateTime?>("IdadeData")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("PossuiCuidador")
                        .HasColumnType("bit");

                    b.Property<string>("Raca")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResideCom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sexo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TempoDeEstudo")
                        .HasColumnType("int");

                    b.Property<string>("Trabalho")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UnityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AppSidd.Domain.Users.Auth.AppRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("AppRole");

                    b.HasData(
                        new
                        {
                            Id = "23D9D409-D7AA-4966-9047-48C04B41F0A1",
                            ConcurrencyStamp = "23725b7c-47c9-4f9a-9119-848dced2ff44",
                            Name = "RoleAdmin",
                            NormalizedName = "ROLEADMIN"
                        },
                        new
                        {
                            Id = "53012ACA-C557-4991-8538-F22C0450CC1F",
                            ConcurrencyStamp = "1f7b6dca-63ef-4f84-b96b-2597330fecb1",
                            Name = "RoleAgent",
                            NormalizedName = "ROLEAGENT"
                        },
                        new
                        {
                            Id = "84A9CF58-31F8-4C1B-BB08-E93813404C22",
                            ConcurrencyStamp = "4f5a2048-b2a1-448f-af15-4d83df131cee",
                            Name = "RoleEnf",
                            NormalizedName = "ROLEENF"
                        },
                        new
                        {
                            Id = "F4EA9499-F2FD-464E-9039-A115177C887D",
                            ConcurrencyStamp = "19fc3dd8-361e-4c0b-bb5c-f24fb6185d16",
                            Name = "RoleMedic",
                            NormalizedName = "ROLEMEDIC"
                        },
                        new
                        {
                            Id = "437D49C5-9C56-4E13-9E65-EB1BFF27B0CA",
                            ConcurrencyStamp = "0c478bc1-067a-49fc-a86e-da4f2205a815",
                            Name = "RoleTec",
                            NormalizedName = "ROLETEC"
                        },
                        new
                        {
                            Id = "BCC9B822-766F-4F00-8A72-288FB78260AB",
                            ConcurrencyStamp = "73535b2b-dba3-4b1e-acaa-e619674b8db3",
                            Name = "RolePatient",
                            NormalizedName = "ROLEPATIENT"
                        });
                });

            modelBuilder.Entity("AppSidd.Domain.Users.Auth.AppUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>");

                    b.HasDiscriminator().HasValue("AppUserRole");
                });

            modelBuilder.Entity("AppSidd.Domain.Project.TesteSintoma", b =>
                {
                    b.HasOne("AppSidd.Domain.Project.Sintomas", "Sintomas")
                        .WithMany()
                        .HasForeignKey("SintomasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AppSidd.Domain.Users.Auth.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AppSidd.Domain.Users.Auth.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_AspNetUserRoles_AspNetRoles_RoleId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AppSidd.Domain.Users.Auth.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppSidd.Domain.Users.Auth.AppUserRole", b =>
                {
                    b.HasOne("AppSidd.Domain.Users.Auth.AppRole", "AppRole")
                        .WithMany("AppUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppSidd.Domain.Users.Auth.AppUser", "AppUser")
                        .WithMany("AppUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
